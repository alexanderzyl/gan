from typing import Tuple
import numpy as np
import tensorflow as tf
from keras import Model
from keras.datasets.mnist import load_data
from keras.layers import Conv2D, LeakyReLU, Dropout, Flatten, Dense, Reshape, Conv2DTranspose, BatchNormalization
from keras.models import Sequential
from keras.initializers import RandomNormal
from tensorflow.keras.optimizers.legacy import Adam
from tensorflow.keras.callbacks import TensorBoard

# Load training data
(trainX, trainy), (testX, testy) = load_data()
trainX = trainX.astype('float32')
trainX = (trainX - 127.5) / 127.5
trainX = np.expand_dims(trainX, axis=-1)


# Generate real samples for training
def generate_real_samples(dataset, n_samples):
    ix = np.random.randint(0, dataset.shape[0], n_samples)
    X = dataset[ix]
    y = np.ones((n_samples, 1))
    return X, y


# Generate latent points for generator
def generate_latent_points(latent_dim, n_samples):
    return np.random.randn(latent_dim * n_samples).reshape(n_samples, latent_dim)


# Generate fake samples generated by the generator
def generate_fake_samples(generator: Model, latent_dim: int, n_samples: int) -> Tuple[np.array, np.array]:
    latent_points = generate_latent_points(latent_dim, n_samples)
    X = generator.predict(latent_points)
    y = np.zeros((n_samples, 1))
    return X, y


def generate_images(g_model, latent_dim, num_rows=1, num_cols=1):
    num_images = num_rows * num_cols
    generated_images, _ = generate_fake_samples(g_model, latent_dim, num_images)
    # rescale the pixel values from [-1,1] to [0,255] to display images
    generated_images = (generated_images + 1.) / 2. * 255.
    generated_images.reshape(num_images, 28, 28)
    # Initialize an empty array to hold the final large image
    final_image = np.zeros((num_rows * 28, num_cols * 28))

    image_index = 0
    for row in range(num_rows):
        for col in range(num_cols):
            final_image[row * 28: (row + 1) * 28, col * 28: (col + 1) * 28] = generated_images[image_index].squeeze()
            image_index += 1

    return final_image


# Define the Discriminator model
def create_discriminator(in_shape=(28, 28, 1)) -> Model:
    model = Sequential()
    model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same', input_shape=in_shape))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    model.add(Conv2D(64, (3, 3), strides=(2, 2), padding='same'))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Dropout(0.4))
    model.add(Flatten())
    model.add(Dense(1, activation='sigmoid'))
    opt = Adam(learning_rate=0.0002, beta_1=0.5)
    model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['accuracy'])
    return model


# Define the Generator model
def create_generator(latent_dim: int) -> Sequential:
    model = Sequential()
    n_nodes = 128 * 7 * 7
    init = RandomNormal(stddev=0.02)
    model.add(Dense(n_nodes, input_dim=latent_dim, kernel_initializer=init))
    model.add(LeakyReLU(alpha=0.2))
    model.add(Reshape((7, 7, 128)))
    model.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(BatchNormalization())
    model.add(LeakyReLU(alpha=0.2))
    model.add(Conv2DTranspose(128, (4, 4), strides=(2, 2), padding='same'))
    model.add(BatchNormalization())
    model.add(LeakyReLU(alpha=0.2))
    # use tanh
    model.add(Conv2D(1, (7, 7), activation='tanh', padding='same'))
    return model


# Create GAN model
def create_gan(g_model: Model, d_model: Model) -> Model:
    d_model.trainable = False
    model = Sequential()
    model.add(g_model)
    model.add(d_model)
    opt = Adam(learning_rate=0.0002, beta_1=0.5)
    model.compile(loss='binary_crossentropy', optimizer=opt)
    return model


# Adding TensorBoard
# %reload_ext tensorboard
# !rm -rf logs
# %tensorboard --logdir logs
log_dir = './logs'
tensorboard_gan = TensorBoard(log_dir=log_dir, histogram_freq=1, write_images=True)
file_writer = tf.summary.create_file_writer(log_dir)


def train(g_model: Model, d_model: Model, gan_model: Model, dataset: np.array, latent_dim: int, n_epochs=100,
          n_batch=256) -> None:
    bat_per_epo = int(dataset.shape[0] / n_batch)
    half_batch = int(n_batch / 2)
    gan_loss = None
    d_loss = None
    for i in range(n_epochs):
        for j in range(bat_per_epo):
            X_real, y_real = generate_real_samples(dataset, half_batch)
            X_fake, y_fake = generate_fake_samples(g_model, latent_dim, half_batch)
            X, y = np.vstack((X_real, X_fake)), np.vstack((y_real, y_fake))
            d_loss, _ = d_model.train_on_batch(X, y)
            X_gan = generate_latent_points(latent_dim, n_batch)
            y_gan = np.ones((n_batch, 1))
            gan_loss = gan_model.train_on_batch(X_gan, y_gan)
            # Logging the losses to tensorboard
            print('>%d, %d/%d, d=%.3f, g=%.3f' % (i + 1, j + 1, bat_per_epo, d_loss, gan_loss))
        # shape = None
        with file_writer.as_default():
            generated_image = generate_images(g_model, latent_dim, num_rows=5, num_cols=5)
            generated_image = np.reshape(generated_image,(1, generated_image.shape[0], generated_image.shape[1], 1))
            tf.summary.image("Generated image", generated_image, step=i)

        tensorboard_gan.on_epoch_end(i, {'gan_loss': gan_loss, 'd_loss': d_loss, 'max_pixel': np.max(generated_image),
                                         'min_pixel': np.min(generated_image)})
        if (i) % 10 == 0:
            g_model.save_weights(f'./models/generator_{i}.keras')
            d_model.save_weights(f'./models/discriminator_{i}.keras')



# Main function
# if __name__ == '__main__':
discriminator = create_discriminator()
generator = create_generator(100)
gan = create_gan(generator, discriminator)

# Create a TensorBoard callback
tensorboard_gan.set_model(gan)

train(generator, discriminator, gan, trainX, 100)
